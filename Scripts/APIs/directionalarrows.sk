# Copyright 2020  Clément Raynaud (carlodrift)

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

function direction(from: location, to: location) :: text:
	set pitch of {_from} to 0.001
	set {_behind} to true if (flatDistance({_from} and {_to})) - flatDistance(location 1 meter behind {_from} and {_to}) > 1/3
	set {_infrontof} to true if (flatDistance({_from} and {_to})) - flatDistance(location 1 meter in front of {_from} and {_to}) > 1/3
	set {_right} to true if (flatDistance({_from} and {_to})) - flatDistance(location 1 meter right {_from} and {_to}) > 1/3
	set {_left} to true if (flatDistance({_from} and {_to})) - flatDistance(location 1 meter left {_from} and {_to}) > 1/3
	return "⬊" if {_behind} and {_right} are true
	return "⬋" if {_behind} and {_left} are true
	return "⬈" if {_infrontof} and {_right} are true
	return "⬉" if {_infrontof} and {_left} are true
	if {_right} and {_left} are not set:
		return "↑" if {_infrontof} is true
		return "↓" if {_behind} is true
	if {_infrontof} and {_behind} are not set:
		return "←" if {_left} is true
		return "→" if {_right} is true
	return "✔"

function flatDistance(from: location, to: location) :: number:
	set y coordinate of {_from} to y coordinate of {_to}
	return distance between {_from} and {_to}

# Example
# every second:
# 	set {_location} to location(0, 0, 0, world "world")
# 	loop all players in world "world":
# 		set {_direction} to direction(location of loop-player and {_location})
# 		set {_distance} to round(flatDistance(loop-player and {_location}))
# 		send action bar "%{_direction}% (%{_distance}% block(s))" to loop-player